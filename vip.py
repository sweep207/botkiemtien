#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Bot Telegram Ki·∫øm Ti·ªÅn Online - DEMO
"""
# --- C·∫•u h√¨nh game T√†i X·ªâu ---
TAIXIU_WIN_RATE = 0.5  # 50% c∆° h·ªôi th·∫Øng user
MIN_BET = 500  # c∆∞·ª£c t·ªëi thi·ªÉu
# --- C·∫•u h√¨nh Admin ---
ADMIN_ID = 5645750335  # Telegram ID admin
BANK_INFO = """üí∞ H∆∞·ªõng d·∫´n n·∫°p ti·ªÅn:
‚Ä¢ Ch·ªß TK: sweep
‚Ä¢ S·ªë TK: thay vao day
‚Ä¢ Ng√¢n h√†ng: Amazon
‚Ä¢ N·ªôi dung chuy·ªÉn kho·∫£n: <tuy ban>"""
# C·∫•u h√¨nh x·ªï s·ªë
XOSO_MIN = 1
XOSO_MAX = 50
XOSO_DURATION = 60  # th·ªùi gian 1 phi√™n
XOSO_WIN_AMOUNT = 2000  # ti·ªÅn th∆∞·ªüng m·ªói l·∫ßn ƒëo√°n ƒë√∫ng
current_xoso_number = None
xoso_active = False

# --- Import c·∫ßn thi·∫øt ---
import asyncio
import sqlite3
import random
import datetime
import nest_asyncio
nest_asyncio.apply()

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# --- Kh·ªüi t·∫°o database ---
conn = sqlite3.connect("vipbot.db")
c = conn.cursor()

# X√≥a b·∫£ng tasks c≈© n·∫øu t·ªìn t·∫°i
c.execute("DROP TABLE IF EXISTS tasks")

# --- T·∫°o b·∫£ng nhi·ªám v·ª• m·ªõi ---
c.execute('''
CREATE TABLE tasks (
    task_id INTEGER PRIMARY KEY,
    title TEXT,
    description TEXT,
    reward INTEGER DEFAULT 0
)
''')

# --- Th√™m nhi·ªám v·ª• c·ªë ƒë·ªãnh ---
fixed_tasks = [
    (1, "Tham Gia Nhom Telegram", "t.me/Shadowrocket2411", 500),
    (2, "Dang Ky Kenh Youtube", "https://youtube.com/@sweep207", 200),
    (3, "Theo Doi Tiktok", "https://tiktok.com/@sweep2712", 200)
]

for task in fixed_tasks:
    c.execute('''
    INSERT OR IGNORE INTO tasks (task_id, title, description, reward)
    VALUES (?, ?, ?, ?)
    ''', task)

conn.commit()

# --- B·∫£ng tr·∫°ng th√°i user nhi·ªám v·ª• ---
c.execute('''
CREATE TABLE IF NOT EXISTS user_tasks (
    user_id INTEGER,
    task_id INTEGER,
    status TEXT DEFAULT 'pending',
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, task_id)
)
''')

conn.commit()

# --- c·∫•u h√¨nh c∆° b·∫£n ---
TOKEN = "8272774983:AAEqFvW8p8QdNWQXzfNZCYPV-uahIxArjaQ"   # <-- thay b·∫±ng token BotFather c·∫•p
ADMIN_ID = 5645750335      # <-- thay b·∫±ng Telegram ID c·ªßa admin

# --- K·∫øt n·ªëi Database (d√πng chung vipbot.db) ---
conn = sqlite3.connect("vipbot.db", check_same_thread=False)
c = conn.cursor()

# T·∫°o b·∫£ng users ƒë·ªÉ l∆∞u th√¥ng tin ng∆∞·ªùi d√πng
c.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    balance INTEGER DEFAULT 0,
    points INTEGER DEFAULT 0,
    last_daily TEXT DEFAULT ''
)
''')
conn.commit()

# --- H√†m h·ªó tr·ª£ ---
def add_user(user_id, username):
    """Th√™m user m·ªõi v√†o database (n·∫øu ch∆∞a c√≥)."""
    c.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (user_id, username))
    conn.commit()

def get_user(user_id):
    """L·∫•y th√¥ng tin user."""
    c.execute("SELECT user_id, username, balance, points, last_daily FROM users WHERE user_id=?", (user_id,))
    return c.fetchone()
    # PH·∫¶N 2: Handler cho l·ªánh /start

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username)

    text = (
        f"üëã Xin ch√†o {user.first_name}!\n\n"
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi **BOT KI·∫æM TI·ªÄN ONLINE** üí∏\n\n"
        "‚ö° L√†m nhi·ªám v·ª• nh·ªè (like video, ƒëƒÉng k√Ω k√™nh, vuot link...) ƒë·ªÉ nh·∫≠n xu.\n"
        "üéÅ R√∫t ti·ªÅn khi ƒë·∫°t t·ªëi thi·ªÉu **20.000ƒë**.\n\n"
        "üìú G√µ /menu ƒë·ªÉ xem danh s√°ch l·ªánh."
    )

    await update.message.reply_text(text, parse_mode="Markdown")
    # PH·∫¶N 3: Handler cho l·ªánh /menu

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìå Danh s√°ch l·ªánh h·ªó tr·ª£:\n\n"
        "/start - B·∫Øt ƒë·∫ßu\n"
        "/menu - Xem h∆∞·ªõng d·∫´n\n"
        "/diemdanh - ƒêi·ªÉm danh h·∫±ng ng√†y\n"
        "/nhiemvu - Nh·∫≠n nhi·ªám v·ª•\n"
        "/rut - Y√™u c·∫ßu r√∫t ti·ªÅn\n"
        "/luat - N·ªôi quy & lu·∫≠t\n"
        "/code - Nh·∫≠p code t·ª´ admin\n"
        "/pet - Nu√¥i th√∫ c∆∞ng (mini game)\n"
        "/gioithieu - Nh·∫≠n link gi·ªõi thi·ªáu\n"
        "/lienhe - Li√™n h·ªá h·ªó tr·ª£\n"
    )
    await update.message.reply_text(text)
    # PH·∫¶N 4: Handler cho l·ªánh /diemdanh

import datetime

async def diemdanh(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    today = datetime.date.today().isoformat()

    # L·∫•y th√¥ng tin user
    data = get_user(user.id)

    if not data:
        add_user(user.id, user.username)
        data = get_user(user.id)

    last_daily = data[4]

    if last_daily == today:
        await update.message.reply_text("üìÖ B·∫°n ƒë√£ ƒëi·ªÉm danh h√¥m nay r·ªìi, h√£y quay l·∫°i v√†o ng√†y mai nh√©!")
    else:
        # C·ªông ƒëi·ªÉm
        c.execute("UPDATE users SET points = points + 10, last_daily=? WHERE user_id=?", (today, user.id))
        conn.commit()
        await update.message.reply_text("‚úÖ ƒêi·ªÉm danh th√†nh c√¥ng! +100 Vnd üéâ")
        # --- PH·∫¶N PROFILE ---
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # Demo d·ªØ li·ªáu user (balance, hunger, happy)
    # Sau n√†y c√≥ th·ªÉ thay b·∫±ng get_user t·ª´ DB
    balance = 0
    hunger = 100
    happy = 100

    text = (
        f"üë§ *Th√¥ng tin t√†i kho·∫£n*\n\n"
        f"ID: `{user.id}`\n"
        f"T√™n: {user.first_name}\n"
        f"S·ªë d∆∞: {balance}ƒë\n\n"
        f"üêæ Th√∫ c∆∞ng:\n"
        f"  ‚Ä¢ ƒê√≥i: {hunger}/100\n"
        f"  ‚Ä¢ Vui v·∫ª: {happy}/100"
    )

    await update.message.reply_text(text, parse_mode="Markdown")

async def luat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú **N·ªôi quy s·ª≠ d·ª•ng bot:**\n"
        "1Ô∏è‚É£ Kh√¥ng spam, kh√¥ng gian l·∫≠n nhi·ªám v·ª•.\n"
        "2Ô∏è‚É£ Th·ª±c hi·ªán nhi·ªám v·ª• ƒë√∫ng y√™u c·∫ßu.\n"
        "3Ô∏è‚É£ Admin c√≥ quy·ªÅn kh√≥a t√†i kho·∫£n gian l·∫≠n.\n"
        "4Ô∏è‚É£ R√∫t t·ªëi thi·ªÉu 20.000ƒë.\n"
    )
    await update.message.reply_text(text, parse_mode="Markdown")


async def lienhe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "üìû Li√™n h·ªá h·ªó tr·ª£ admin: @sweep207"
    await update.message.reply_text(text)

# --- PH·∫¶N REF ---
async def ref(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # T·∫°o link gi·ªõi thi·ªáu theo user ID
    ref_link = f"https://t.me/{context.bot.username}?start={user.id}"

    text = (
        f"üîó *Link gi·ªõi thi·ªáu c·ªßa b·∫°n:*\n"
        f"{ref_link}\n\n"
        "üëâ M·ªùi b·∫°n b√® tham gia ƒë·ªÉ nh·∫≠n th∆∞·ªüng!"
    )

    await update.message.reply_text(text, parse_mode="Markdown")
    # PH·∫¶N 6: /code (nh·∫≠p code t·ª´ admin)

# --- T·∫°o b·∫£ng code ---
c.execute('''
CREATE TABLE IF NOT EXISTS codes (
    code TEXT PRIMARY KEY,
    reward INTEGER,
    is_active INTEGER DEFAULT 1
)
''')

# T·∫°o b·∫£ng l∆∞u l·ªãch s·ª≠ user ƒë√£ d√πng code
c.execute('''
CREATE TABLE IF NOT EXISTS user_codes (
    user_id INTEGER,
    code TEXT,
    PRIMARY KEY(user_id, code)
)
''')
conn.commit()


# --- Admin th√™m code m·ªõi ---
def add_code(code: str, reward: int):
    """Admin th√™m code m·ªõi v√†o database"""
    c.execute("INSERT OR REPLACE INTO codes (code, reward, is_active) VALUES (?, ?, 1)", (code, reward))
    conn.commit()


# --- Handler /code ---
async def code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if len(context.args) == 0:
        await update.message.reply_text("‚ùå Vui l√≤ng nh·∫≠p code.\nV√≠ d·ª•: `/code CODE2025`", parse_mode="Markdown")
        return

    input_code = context.args[0].strip().upper()

    # Ki·ªÉm tra code c√≥ t·ªìn t·∫°i kh√¥ng
    c.execute("SELECT reward, is_active FROM codes WHERE code=?", (input_code,))
    code_data = c.fetchone()

    if not code_data:
        await update.message.reply_text("‚ùå Code kh√¥ng t·ªìn t·∫°i.")
        return

    reward, is_active = code_data

    if is_active == 0:
        await update.message.reply_text("‚ö†Ô∏è Code n√†y ƒë√£ h·∫øt h·∫°n ho·∫∑c b·ªã v√¥ hi·ªáu h√≥a.")
        return

    # Ki·ªÉm tra user ƒë√£ nh·∫≠p code n√†y ch∆∞a
    c.execute("SELECT * FROM user_codes WHERE user_id=? AND code=?", (user.id, input_code))
    if c.fetchone():
        await update.message.reply_text("‚ö†Ô∏è B·∫°n ƒë√£ s·ª≠ d·ª•ng code n√†y r·ªìi.")
        return

    # Th√™m v√†o user_codes
    c.execute("INSERT INTO user_codes (user_id, code) VALUES (?, ?)", (user.id, input_code))

    # C·ªông ƒëi·ªÉm cho user
    c.execute("UPDATE users SET points = points + ? WHERE user_id=?", (reward, user.id))
    conn.commit()

    await update.message.reply_text(f"‚úÖ Nh·∫≠p code th√†nh c√¥ng! B·∫°n nh·∫≠n ƒë∆∞·ª£c +{reward} ƒëi·ªÉm üéâ")
    # PH·∫¶N 7: /nhiemvu - qu·∫£n l√Ω nhi·ªám v·ª•

# --- T·∫°o b·∫£ng nhi·ªám v·ª• ---
c.execute('''
CREATE TABLE IF NOT EXISTS missions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    description TEXT,
    reward INTEGER,
    is_active INTEGER DEFAULT 1
)
''')

# L∆∞u user ƒë√£ nh·∫≠n nhi·ªám v·ª•
c.execute('''
CREATE TABLE IF NOT EXISTS user_missions (
    user_id INTEGER,
    mission_id INTEGER,
    status TEXT DEFAULT "pending", -- pending | approved | rejected
    PRIMARY KEY(user_id, mission_id)
)
''')
conn.commit()


# --- Admin th√™m nhi·ªám v·ª• ---
def add_mission(title: str, description: str, reward: int):
    c.execute("INSERT INTO missions (title, description, reward, is_active) VALUES (?, ?, ?, 1)",
              (title, description, reward))
    conn.commit()


# --- PH·∫¶N: /nhiemvu ---
async def nhiemvu(update, context):
    user_id = update.effective_user.id

    # L·∫•y danh s√°ch nhi·ªám v·ª•
    c.execute("SELECT task_id, title, description, reward FROM tasks")
    tasks = c.fetchall()

    if not tasks:
        await update.message.reply_text("üì≠ Hi·ªán ch∆∞a c√≥ nhi·ªám v·ª• n√†o.\nüëâ H√£y quay l·∫°i sau!")
        return

    msg = "üéØ **Danh s√°ch nhi·ªám v·ª• hi·ªán c√≥:**\n\n"
    for t in tasks:
        task_id, title, desc, reward = t
        msg += f"üìù *{title}*\n{desc}\nüí∞ Ph·∫ßn th∆∞·ªüng: {reward} ƒëi·ªÉm\n‚úÖ G·ª≠i ho√†n th√†nh: /hoanthanh_{task_id}\n\n"

    await update.message.reply_text(msg, parse_mode='Markdown')

# --- Handler /hoanthanh_ (submit nhi·ªám v·ª•) ---
async def submit_task(update, context):
    user_id = update.effective_user.id
    text = update.message.text

    # L·∫•y task_id t·ª´ l·ªánh /hoanthanh_*
    try:
        task_id = int(text.split('_')[1])
    except:
        await update.message.reply_text("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá.")
        return

    # L∆∞u tr·∫°ng th√°i pending
    c.execute('''
    INSERT OR REPLACE INTO user_tasks (user_id, task_id, status)
    VALUES (?, ?, 'pending')
    ''', (user_id, task_id))
    conn.commit()

    await update.message.reply_text("üì¨ Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c g·ª≠i, ch·ªù admin duy·ªát")


# --- L·ªánh /nhan <id> ---
async def nhan_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if len(context.args) == 0:
        await update.message.reply_text("‚ùå Vui l√≤ng nh·∫≠p ID nhi·ªám v·ª•.\nV√≠ d·ª•: `/nhan 1`", parse_mode="Markdown")
        return

    try:
        mission_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è ID nhi·ªám v·ª• ph·∫£i l√† s·ªë.")
        return

    # Ki·ªÉm tra nhi·ªám v·ª• t·ªìn t·∫°i
    c.execute("SELECT title, reward FROM missions WHERE id=? AND is_active=1", (mission_id,))
    mission = c.fetchone()

    if not mission:
        await update.message.reply_text("‚ùå Nhi·ªám v·ª• kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ƒë√≥ng.")
        return

    title, reward = mission

    # Ki·ªÉm tra user ƒë√£ nh·∫≠n ch∆∞a
    c.execute("SELECT status FROM user_missions WHERE user_id=? AND mission_id=?", (user.id, mission_id))
    if c.fetchone():
        await update.message.reply_text("‚ö†Ô∏è B·∫°n ƒë√£ nh·∫≠n nhi·ªám v·ª• n√†y r·ªìi, ch·ªù admin duy·ªát.")
        return

    # Th√™m user_missions (ch·ªù admin duy·ªát)
    c.execute("INSERT INTO user_missions (user_id, mission_id, status) VALUES (?, ?, 'pending')", (user.id, mission_id))
    conn.commit()

    # Th√¥ng b√°o user
    await update.message.reply_text(f"üìå B·∫°n ƒë√£ ƒëƒÉng k√Ω nhi·ªám v·ª•: *{title}*\nVui l√≤ng ch·ªù admin duy·ªát.",
                                    parse_mode="Markdown")

    # G·ª≠i th√¥ng b√°o cho admin
    for admin in ADMIN_IDS:
        await context.bot.send_message(
            chat_id=admin,
            text=f"üë§ User {user.first_name} ({user.id}) ƒë√£ nh·∫≠n nhi·ªám v·ª• '{title}' (ID: {mission_id}).\n"
                 f"H√£y ki·ªÉm tra v√† duy·ªát."
        )
        # --- PH·∫¶N REF ---
async def ref(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    # L·∫•y username bot ch√≠nh x√°c
    bot_info = await context.bot.get_me()
    bot_username = bot_info.username

    # T·∫°o link gi·ªõi thi·ªáu
    ref_link = f"https://t.me/{bot_username}?start={user.id}"

    text = (
        f"üîó *Link gi·ªõi thi·ªáu c·ªßa b·∫°n:*\n"
        f"{ref_link}\n\n"
        "üëâ M·ªùi b·∫°n b√® tham gia ƒë·ªÉ nh·∫≠n th∆∞·ªüng!"
    )
    conn.commit()  # N·∫øu qu√™n l·ªánh n√†y, d·ªØ li·ªáu kh√¥ng l∆∞u
    # --- PH·∫¶N CSKH: /support ---
async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    admin_contact = "@sweep207"  # Thay b·∫±ng username Telegram c·ªßa admin
    support_text = (
        f"üìû *H·ªó tr·ª£ / CSKH*\n\n"
        f"Ch√†o {user.first_name}, n·∫øu b·∫°n g·∫∑p v·∫•n ƒë·ªÅ ho·∫∑c c·∫ßn h∆∞·ªõng d·∫´n, vui l√≤ng li√™n h·ªá:\n"
        f"‚Ä¢ Admin: {admin_contact}\n\n"
        f"B·∫°n c√≥ th·ªÉ g·ª≠i tin nh·∫Øn tr·ª±c ti·∫øp ho·∫∑c b√°o l·ªói t·∫°i ƒë√¢y, admin s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t."
    )
    await update.message.reply_text(support_text, parse_mode="Markdown")

    await update.message.reply_text(text, parse_mode="Markdown")
    # --- PH·∫¶N N·∫†P TI·ªÄN ---
async def nap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # G·ª≠i h∆∞·ªõng d·∫´n
    await update.message.reply_text(f"{BANK_INFO}\n\nSau khi chuy·ªÉn, g·ª≠i l·ªánh /nap <s·ªë ti·ªÅn> ƒë·ªÉ y√™u c·∫ßu duy·ªát.")
    # xoor slos
async def start_xoso(update, context):
    global current_xoso_number, xoso_active, xoso_players

    if xoso_active:
        await update.message.reply_text("‚ö†Ô∏è X·ªï s·ªë ƒëang ch·∫°y, vui l√≤ng ch·ªù phi√™n hi·ªán t·∫°i k·∫øt th√∫c.")
        return

    current_xoso_number = random.randint(XOSO_MIN, XOSO_MAX)
    xoso_active = True
    xoso_players = {}

    await update.message.reply_text(
        f"üé≤ X·ªï s·ªë b·∫Øt ƒë·∫ßu! ƒêo√°n s·ªë t·ª´ {XOSO_MIN} ƒë·∫øn {XOSO_MAX} b·∫±ng l·ªánh /xoso <s·ªë>.\n"
        f"‚è± B·∫°n c√≥ {XOSO_DURATION} gi√¢y!"
    )

    await asyncio.sleep(XOSO_DURATION)
    xoso_active = False

    if xoso_players:
        winners = [uid for uid, guess in xoso_players.items() if guess == current_xoso_number]
        if winners:
            win_text = "üéâ Ng∆∞·ªùi th·∫Øng:\n"
            for uid in winners:
                # TODO: c·∫≠p nh·∫≠t ti·ªÅn th·∫Øng v√†o DB
                win_text += f"- User ID {uid} th·∫Øng {XOSO_WIN_AMOUNT}ƒë\n"
            await update.message.reply_text(win_text)
        else:
            await update.message.reply_text(f"‚è∞ H·∫øt gi·ªù! Kh√¥ng ai ƒëo√°n ƒë√∫ng. S·ªë may m·∫Øn l√† {current_xoso_number}")
    else:
        await update.message.reply_text(f"‚è∞ H·∫øt gi·ªù! Kh√¥ng ai tham gia. S·ªë may m·∫Øn l√† {current_xoso_number}")

    current_xoso_number = None
    
async def xoso(update, context):
    global xoso_players, xoso_active
    user = update.effective_user
    args = context.args

    if not xoso_active:
        await update.message.reply_text("‚ö†Ô∏è Hi·ªán kh√¥ng c√≥ phi√™n x·ªï s·ªë n√†o ƒëang ch·∫°y.")
        return

    if not args or not args[0].isdigit():
        await update.message.reply_text(f"üìå C√∫ ph√°p: /xoso <s·ªë t·ª´ {XOSO_MIN}‚Äì{XOSO_MAX}>")
        return

    guess = int(args[0])
    if guess < XOSO_MIN or guess > XOSO_MAX:
        await update.message.reply_text(f"‚ö†Ô∏è S·ªë d·ª± ƒëo√°n ph·∫£i t·ª´ {XOSO_MIN} ƒë·∫øn {XOSO_MAX}")
        return

    xoso_players[user.id] = guess
    await update.message.reply_text(f"‚úÖ {user.first_name} ƒë√£ ƒëo√°n s·ªë {guess}. Ch·ªù k·∫øt th√∫c phi√™n ƒë·ªÉ bi·∫øt k·∫øt qu·∫£!")

# --- T·∫°o b·∫£ng r√∫t ti·ªÅn ---
c.execute('''
CREATE TABLE IF NOT EXISTS withdraws (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    amount INTEGER,
    status TEXT DEFAULT "pending", -- pending | approved | rejected
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()


# --- /rut ---
async def rut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not context.args or not context.args[0].isdigit():
        await update.message.reply_text("üìå C√∫ ph√°p: /rut <s·ªë ƒëi·ªÉm>")
        return
    amount = int(context.args[0])
    
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("SELECT balance FROM users WHERE user_id=?", (user.id,))
    row = c.fetchone()
    
    if not row or row[0] < amount:
        await update.message.reply_text("‚ö† S·ªë d∆∞ kh√¥ng ƒë·ªß ho·∫∑c ch∆∞a c√≥ t√†i kho·∫£n.")
    else:
        # g·ª≠i th√¥ng b√°o admin duy·ªát
        ADMIN_ID = 6993504486
        await context.bot.send_message(chat_id=ADMIN_ID,
                                       text=f"üí∞ Y√™u c·∫ßu r√∫t {amount} xu t·ª´ @{user.username} (ID: {user.id})")
        await update.message.reply_text(f"‚úÖ Y√™u c·∫ßu r√∫t {amount} xu ƒë√£ g·ª≠i admin.")
    conn.close()

    # Th√¥ng b√°o cho admin
    for admin in ADMIN_IDS:
        await context.bot.send_message(
            chat_id=admin,
            text=f"üí∏ User {user.first_name} ({user.id}) y√™u c·∫ßu r√∫t {amount} ƒëi·ªÉm.\n"
                 f"Duy·ªát l·ªánh b·∫±ng: `/duyet_rut {user.id} {amount}` ho·∫∑c t·ª´ ch·ªëi: `/huy_rut {user.id} {amount}`"
        )
        #tao lenh tai xiu
async def taixiu(update, context):
    user = update.effective_user
    args = context.args  # ƒë·ªçc tham s·ªë ng∆∞·ªùi d√πng nh·∫≠p

    # Ki·ªÉm tra c√∫ ph√°p
    if len(args) != 2:
        await update.message.reply_text("üìå C√°ch d√πng: /taixiu [t√†i/x·ªâu] [s·ªë ti·ªÅn ‚â•100]")
        return

    choice = args[0].lower()
    try:
        bet = int(args[1])
    except:
        await update.message.reply_text("‚ö†Ô∏è S·ªë ti·ªÅn ph·∫£i l√† s·ªë nguy√™n.")
        return

    if bet < MIN_BET:
        await update.message.reply_text(f"‚ö†Ô∏è C∆∞·ª£c t·ªëi thi·ªÉu {MIN_BET}ƒë.")
        return

    # Demo s·ªë d∆∞ (thay b·∫±ng DB khi c√≥)
    balance = 1000
    if bet > balance:
        await update.message.reply_text("‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß s·ªë d∆∞ ƒë·ªÉ c∆∞·ª£c.")
        return

    # Quay 3 x√∫c x·∫Øc
    dices = [random.randint(1,6) for _ in range(3)]
    total = sum(dices)
    result = "t√†i" if total >= 11 else "x·ªâu"

    # √Åp d·ª•ng t·ªâ l·ªá admin
    import random
    if random.random() <= TAIXIU_WIN_RATE:
        final_result = choice  # c·ªë t√¨nh th·∫Øng user
    else:
        final_result = result  # b√¨nh th∆∞·ªùng

    # T√≠nh th·∫Øng thua
    if choice == final_result:
        balance += bet
        msg = f"üé≤ K·∫øt qu·∫£: {dices} ‚Üí {total} ({final_result})\n‚úÖ B·∫°n th·∫Øng {bet}ƒë!"
    else:
        balance -= bet
        msg = f"üé≤ K·∫øt qu·∫£: {dices} ‚Üí {total} ({final_result})\n‚ùå B·∫°n thua {bet}ƒë!"

    await update.message.reply_text(msg)
    # set nhkem vu
async def setnhiemvu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 5645750335  # Thay b·∫±ng ID admin
    user = update.effective_user

    if user.id != admin_id:
        await update.message.reply_text("‚ö†Ô∏è B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y.")
        return

    if not context.args:
        await update.message.reply_text(
            "üìå C√∫ ph√°p: /setnhiemvu <nhi·ªám v·ª• 1> ; <nhi·ªám v·ª• 2> ; ... ; <nhi·ªám v·ª• N>\n"
            "V√≠ d·ª•: /setnhiemvu Tham gia k√™nh ; M·ªùi 1 b·∫°n ; ƒêi·ªÉm danh ; Ch∆°i mini game"
        )
        return

    new_tasks = " ".join(context.args).split(";")
    global tasks  # tasks l√† danh s√°ch nhi·ªám v·ª• hi·ªÉn th·ªã cho user
    tasks = [task.strip() for task in new_tasks]
    conn.commit()  # N·∫øu qu√™n l·ªánh n√†y, d·ªØ li·ªáu kh√¥ng l∆∞u

    await update.message.reply_text("‚úÖ Nhi·ªám v·ª• ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!")
        # PH·∫¶N 9: /thu - th√∫ c∆∞ng mini game

# --- T·∫°o b·∫£ng th√∫ c∆∞ng ---
c.execute('''
CREATE TABLE IF NOT EXISTS pets (
    user_id INTEGER PRIMARY KEY,
    name TEXT DEFAULT "Th√∫ c∆∞ng",
    hunger INTEGER DEFAULT 50,    -- 0 no, 100 ƒë√≥i
    happiness INTEGER DEFAULT 50, -- 0 bu·ªìn, 100 vui
    last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
conn.commit()


# --- H√†m c·∫≠p nh·∫≠t tr·∫°ng th√°i th√∫ c∆∞ng (th·ªùi gian tr√¥i ƒëi -> ƒë√≥i, bu·ªìn) ---
def update_pet_status(user_id: int):
    import datetime
    from datetime import datetime as dt

    c.execute("SELECT hunger, happiness, last_update FROM pets WHERE user_id=?", (user_id,))
    row = c.fetchone()
    if not row:
        return

    hunger, happiness, last_update = row
    last_update = dt.fromisoformat(last_update)

    now = dt.now()
    diff = (now - last_update).seconds // 3600  # s·ªë gi·ªù tr√¥i qua

    if diff > 0:
        hunger = min(100, hunger + diff * 5)       # c√†ng l√¢u c√†ng ƒë√≥i
        happiness = max(0, happiness - diff * 3)   # c√†ng l√¢u c√†ng bu·ªìn

    # L∆∞u l·∫°i
    c.execute("UPDATE pets SET hunger=?, happiness=?, last_update=CURRENT_TIMESTAMP WHERE user_id=?",
              (hunger, happiness, user_id))
    conn.commit()

# --- L·ªánh /thu ---
async def thu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        conn = sqlite3.connect("users.db")
        c = conn.cursor()

        c.execute("SELECT name, hunger, happiness FROM pets WHERE user_id=?", (user.id,))
        pet = c.fetchone()

        if not pet:
            c.execute(
                "INSERT INTO pets (user_id, name, hunger, happiness) VALUES (?, ?, ?, ?)",
                (user.id, "Th√∫ c∆∞ng c·ªßa b·∫°n", 50, 50)
            )
            conn.commit()
            pet = ("Th√∫ c∆∞ng c·ªßa b·∫°n", 50, 50)

        name, hunger, happiness = pet
        conn.close()

        text = (
            f"üêæ *{name}* c·ªßa b·∫°n:\n\n"
            f"üçñ ƒê√≥i: {hunger}/100\n"
            f"üòä Vui v·∫ª: {happiness}/100\n\n"
            f"L·ªánh chƒÉm s√≥c:\n"
            f"- `/choan` ‚Üí cho ƒÉn\n"
            f"- `/choi` ‚Üí ch∆°i v·ªõi th√∫ c∆∞ng"
        )
        await update.message.reply_text(text, parse_mode="Markdown")

    except Exception as e:
        await update.message.reply_text(f"‚ùå Bao Tri ( Fix ): {e}")


# --- L·ªánh /choan ---
async def choan_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    update_pet_status(user.id)

    c.execute("SELECT hunger FROM pets WHERE user_id=?", (user.id,))
    hunger = c.fetchone()[0]

    hunger = max(0, hunger - 30)  # cho ƒÉn gi·∫£m ƒë√≥i
    c.execute("UPDATE pets SET hunger=?, last_update=CURRENT_TIMESTAMP WHERE user_id=?", (hunger, user.id))
    conn.commit()

    await update.message.reply_text("üçñ B·∫°n ƒë√£ cho th√∫ c∆∞ng ƒÉn, n√≥ ƒë√£ no h∆°n!")


# --- L·ªánh /choi ---
async def choi_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    update_pet_status(user.id)

    c.execute("SELECT happiness FROM pets WHERE user_id=?", (user.id,))
    happiness = c.fetchone()[0]

    happiness = min(100, happiness + 20)  # ch∆°i tƒÉng vui v·∫ª
    c.execute("UPDATE pets SET happiness=?, last_update=CURRENT_TIMESTAMP WHERE user_id=?", (happiness, user.id))
    conn.commit()

    await update.message.reply_text("üé≤ B·∫°n ƒë√£ ch∆°i c√πng th√∫ c∆∞ng, n√≥ r·∫•t vui v·∫ª!")
    # PH·∫¶N 10: /admin - qu·∫£n l√Ω to√†n h·ªá th·ªëng

# --- L·ªánh /duyet <user_id> <mission_id> ---
async def duyet_mission(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå C√∫ ph√°p: /duyet <user_id> <mission_id>")
        return

    try:
        user_id = int(context.args[0])
        mission_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è user_id v√† mission_id ph·∫£i l√† s·ªë.")
        return

    # L·∫•y th√¥ng tin nhi·ªám v·ª•
    c.execute("SELECT reward, title FROM missions WHERE id=?", (mission_id,))
    mission = c.fetchone()
    if not mission:
        await update.message.reply_text("‚ùå Nhi·ªám v·ª• kh√¥ng t·ªìn t·∫°i.")
        return

    reward, title = mission

    # Ki·ªÉm tra user c√≥ pending kh√¥ng
    c.execute("SELECT status FROM user_missions WHERE user_id=? AND mission_id=?", (user_id, mission_id))
    status = c.fetchone()
    if not status or status[0] != "pending":
        await update.message.reply_text("‚ö†Ô∏è User ch∆∞a nh·∫≠n ho·∫∑c ƒë√£ duy·ªát nhi·ªám v·ª• n√†y.")
        return

    # C·∫≠p nh·∫≠t user_missions
    c.execute("UPDATE user_missions SET status='approved' WHERE user_id=? AND mission_id=?", (user_id, mission_id))

    # C·ªông ƒëi·ªÉm
    c.execute("UPDATE users SET points = points + ? WHERE user_id=?", (reward, user_id))
    conn.commit()

    await update.message.reply_text(f"‚úÖ ƒê√£ duy·ªát nhi·ªám v·ª• '{title}' cho user {user_id} (+{reward} ƒëi·ªÉm).")
    await context.bot.send_message(chat_id=user_id, text=f"üéâ Nhi·ªám v·ª• '{title}' ƒë√£ ƒë∆∞·ª£c admin duy·ªát. B·∫°n nh·∫≠n +{reward} ƒëi·ªÉm!")


# --- L·ªánh /duyet_rut <user_id> <amount> ---
async def duyet_rut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå C√∫ ph√°p: /duyet_rut <user_id> <amount>")
        return

    try:
        user_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è user_id v√† amount ph·∫£i l√† s·ªë.")
        return

    # C·∫≠p nh·∫≠t r√∫t ti·ªÅn
    c.execute("UPDATE withdraws SET status='approved' WHERE user_id=? AND amount=? AND status='pending'",
              (user_id, amount))
    conn.commit()

    await update.message.reply_text(f"üí∏ ƒê√£ duy·ªát r√∫t {amount} ƒëi·ªÉm cho user {user_id}.")
    await context.bot.send_message(chat_id=user_id, text=f"‚úÖ Y√™u c·∫ßu r√∫t {amount} ƒëi·ªÉm c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát!")


# --- L·ªánh /huy_rut <user_id> <amount> ---
async def huy_rut(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå C√∫ ph√°p: /huy_rut <user_id> <amount>")
        return

    try:
        user_id = int(context.args[0])
        amount = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è user_id v√† amount ph·∫£i l√† s·ªë.")
        return

    c.execute("UPDATE withdraws SET status='rejected' WHERE user_id=? AND amount=? AND status='pending'",
              (user_id, amount))
    conn.commit()

    await update.message.reply_text(f"‚ùå ƒê√£ t·ª´ ch·ªëi r√∫t {amount} ƒëi·ªÉm c·ªßa user {user_id}.")
    await context.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è Y√™u c·∫ßu r√∫t {amount} ƒëi·ªÉm c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.")


# --- L·ªánh /add_nv <title> | <desc> | <reward> ---
async def add_nv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    msg = " ".join(context.args)
    if "|" not in msg:
        await update.message.reply_text("‚ùå C√∫ ph√°p: /add_nv <ti√™u ƒë·ªÅ> | <m√¥ t·∫£> | <ƒëi·ªÉm th∆∞·ªüng>")
        return

    try:
        title, desc, reward = [x.strip() for x in msg.split("|")]
        reward = int(reward)
    except:
        await update.message.reply_text("‚ö†Ô∏è Sai c√∫ ph√°p ho·∫∑c reward kh√¥ng h·ª£p l·ªá.")
        return

    add_mission(title, desc, reward)
    await update.message.reply_text(f"‚úÖ ƒê√£ th√™m nhi·ªám v·ª•: {title} (+{reward} ƒëi·ªÉm)")


# --- L·ªánh /add_code <CODE> <reward> ---
async def add_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    if len(context.args) < 2:
        await update.message.reply_text("‚ùå C√∫ ph√°p: /add_code <CODE> <reward>")
        return

    code = context.args[0].upper()
    try:
        reward = int(context.args[1])
    except:
        await update.message.reply_text("‚ö†Ô∏è reward ph·∫£i l√† s·ªë.")
        return

    add_code(code, reward)
    await update.message.reply_text(f"‚úÖ ƒê√£ th√™m code {code} (+{reward} ƒëi·ªÉm).")


# --- L·ªánh /broadcast <n·ªôi dung> ---
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    msg = " ".join(context.args)
    if not msg:
        await update.message.reply_text("‚ùå C√∫ ph√°p: /broadcast <n·ªôi dung>")
        return

    c.execute("SELECT user_id FROM users")
    users = c.fetchall()

    count = 0
    for (uid,) in users:
        try:
            await context.bot.send_message(chat_id=uid, text=f"üì¢ Th√¥ng b√°o t·ª´ admin:\n\n{msg}")
            count += 1
        except:
            pass

    await update.message.reply_text(f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o cho {count} ng∆∞·ªùi d√πng.")
    # PH·∫¶N 11: /menu v√† /rules

# --- L·ªánh /menu (ch·ªâ user) ---
async def menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìñ *Menu H∆∞·ªõng D·∫´n L·ªánh*\n\n"
        "üë§ T√†i kho·∫£n:\n"
        "  ‚Ä¢ /start ‚Üí b·∫Øt ƒë·∫ßu\n"
        "  ‚Ä¢ /menu ‚Üí menu l·ªánh\n"
        "  ‚Ä¢ /rules ‚Üí lu·∫≠t l·ªá\n"
        "  ‚Ä¢ /profile ‚Üí xem th√¥ng tin t√†i kho·∫£n\n\n"
        "üéÅ ƒêi·ªÉm th∆∞·ªüng:\n"
        "  ‚Ä¢ /diemdanh ‚Üí ƒëi·ªÉm danh h√†ng ng√†y\n"
        "  ‚Ä¢ /code <M√É> ‚Üí nh·∫≠p code th∆∞·ªüng\n"
        "  ‚Ä¢ /ref ‚Üí l·∫•y link gi·ªõi thi·ªáu b·∫°n b√®\n\n"
        "üìå Nhi·ªám v·ª•:\n"
        "  ‚Ä¢ /nhiemvu ‚Üí danh s√°ch nhi·ªám v·ª•\n"
        "  ‚Ä¢ /nhan <ID> ‚Üí nh·∫≠n nhi·ªám v·ª•\n\n"
        "üí∏ R√∫t ti·ªÅn:\n"
        "  ‚Ä¢ /rut <s·ªë ƒëi·ªÉm> ‚Üí y√™u c·∫ßu r√∫t (t·ªëi thi·ªÉu 20k)\n\n"
        "üí∞ N·∫°p ti·ªÅn:\n"
        "  ‚Ä¢ /nap ‚Üí xem h∆∞·ªõng d·∫´n n·∫°p ti·ªÅn\n\n"
        "üêæ Th√∫ c∆∞ng:\n"
        "  ‚Ä¢ /thu ‚Üí xem tr·∫°ng th√°i th√∫ c∆∞ng\n"
        "  ‚Ä¢ /choan ‚Üí cho th√∫ c∆∞ng ƒÉn\n"
        "  ‚Ä¢ /choi ‚Üí ch∆°i v·ªõi th√∫ c∆∞ng\n"
        "üé≤ Mini-game:\n"
        " ‚Ä¢ /taixiu <t√†i/x·ªâu> <s·ªë ti·ªÅn>\n"
        " ‚Ä¢ /xoso <s·ªë t·ª´ 1‚Äì10> ‚Üí ƒëo√°n s·ªë may m·∫Øn (60 gi√¢y m·ªói phi√™n)\n\n"
        "üìû H·ªó tr·ª£ / CSKH:\n"
        " ‚Ä¢ /support ‚Üí li√™n h·ªá admin ho·∫∑c nh·∫≠n h∆∞·ªõng d·∫´n\n"
    )
    await update.message.reply_text(text, parse_mode="Markdown")


# --- L·ªánh /rules ---
async def rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú *N·ªôi Quy & Lu·∫≠t L·ªá*\n\n"
        "1. Kh√¥ng spam, gian l·∫≠n ho·∫∑c d√πng tool cheat.\n"
        "2. M·ªói nhi·ªám v·ª• ph·∫£i ho√†n th√†nh th·∫≠t, ƒë√∫ng y√™u c·∫ßu.\n"
        "3. N·∫øu vi ph·∫°m ‚Üí c√≥ th·ªÉ b·ªã kho√° t√†i kho·∫£n v√† m·∫•t to√†n b·ªô ƒëi·ªÉm.\n"
        "4. ƒêi·ªÉm ch·ªâ quy ƒë·ªïi th√†nh ti·ªÅn khi ƒë·ªß s·ªë d∆∞ t·ªëi thi·ªÉu 20k.\n"
        "5. Admin c√≥ to√†n quy·ªÅn x·ª≠ l√Ω tranh ch·∫•p.\n\n"
        "üëâ Khi s·ª≠ d·ª•ng bot t·ª©c l√† b·∫°n ƒë√£ ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n tr√™n."
    )
    await update.message.reply_text(text, parse_mode="Markdown")
    # --- Ng∆∞·ªùi d√πng xem nhi·ªám v·ª• ---
async def nhiemvu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("vipbot.db")
    c = conn.cursor()
    c.execute("SELECT id, description FROM tasks")
    tasks = c.fetchall()
    conn.close()

    if not tasks:
        return await update.message.reply_text("üì≠ Hi·ªán ch∆∞a c√≥ nhi·ªám v·ª• n√†o.\nüëâ H√£y quay l·∫°i sau!")

    text = "üéØ *Nhi·ªám v·ª• h√¥m nay:*\n\n"
    for tid, desc in tasks:
        text += f"{tid}. {desc}\n"

    text += "\nüëâ Ho√†n th√†nh nhi·ªám v·ª• v√† dung lenh #hoanthanh_1,2,3 (so nhiem vu) b√°o admin ƒë·ªÉ nh·∫≠n th∆∞·ªüng!"
    await update.message.reply_text(text, parse_mode="Markdown")
    # --- PH·∫¶N: /choan ---
async def choan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.first_name
    text = (
        f"üçñ B·∫°n {user} v·ª´a cho th√∫ c∆∞ng ƒÉn!\n"
        "üê∂ Th√∫ c∆∞ng vui v·∫ª h∆°n v√† b·∫°n nh·∫≠n ƒë∆∞·ª£c +1 xu th∆∞·ªüng."
    )
    await update.message.reply_text(text)
    # --- /nhan ---
async def nhan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID nhi·ªám v·ª•. V√≠ d·ª•: /nhan 1")
        return

    task_id = context.args[0]
    # ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ ki·ªÉm tra task_id c√≥ h·ª£p l·ªá hay kh√¥ng
    # v√† c·∫≠p nh·∫≠t s·ªë nhi·ªám v·ª• ƒë√£ l√†m trong DB
    await update.message.reply_text(f"‚úÖ B·∫°n ƒë√£ nh·∫≠n nhi·ªám v·ª• {task_id}. Ho√†n th√†nh ƒë·ªÉ nh·∫≠n th∆∞·ªüng!")
    # --- PH·∫¶N: /choi ---
async def choi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üéÆ *Khu vui ch∆°i mini game*\n\n"
        "1. G√µ /choan ƒë·ªÉ cho th√∫ c∆∞ng ƒÉn.\n"
        "2. G√µ /diemdanh ƒë·ªÉ nh·∫≠n th∆∞·ªüng h√†ng ng√†y.\n"
        "3. S·∫Øp t·ªõi s·∫Ω c√≥ th√™m nhi·ªÅu game nh·ªè kh√°c..."
    )
    await update.message.reply_text(text, parse_mode="Markdown")
    # --- PH·∫¶N: /addnv (Admin th√™m nhi·ªám v·ª•) ---
async def addnv_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # Ch·ªâ cho admin d√πng (thay YOUR_ADMIN_ID b·∫±ng ID Telegram c·ªßa b·∫°n)
    ADMIN_ID = 5645750335  
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return
    
    if not context.args:
        await update.message.reply_text("üìå C√°ch d√πng: /addnv [n·ªôi dung nhi·ªám v·ª•]")
        return
    
    task = " ".join(context.args)
    conn.commit()  # N·∫øu qu√™n l·ªánh n√†y, d·ªØ li·ªáu kh√¥ng l∆∞u
    
    # ·ªû ƒë√¢y demo: ch·ªâ in ra nhi·ªám v·ª•
    # Sau n√†y b·∫°n c√≥ th·ªÉ l∆∞u v√†o file JSON ho·∫∑c DB
    await update.message.reply_text(f"‚úÖ ƒê√£ th√™m nhi·ªám v·ª• m·ªõi:\nüëâ {task}")
    # --- PH·∫¶N: /delnv (Admin xo√° nhi·ªám v·ª•) ---
async def delnv_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # ID admin, thay b·∫±ng ID Telegram c·ªßa b·∫°n
    ADMIN_ID = 5645750335 
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return
    
    if not context.args:
        await update.message.reply_text("üìå C√°ch d√πng: /delnv [t√™n nhi·ªám v·ª•]")
        return
    
    task = " ".join(context.args)
    
    # Demo: ch·ªâ in ra nhi·ªám v·ª• b·ªã xo√°
    # Sau n√†y b·∫°n c√≥ th·ªÉ xo√° trong file JSON/DB
    await update.message.reply_text(f"üóëÔ∏è ƒê√£ xo√° nhi·ªám v·ª•:\nüëâ {task}")
    # --- PH·∫¶N: /duyet (Admin duy·ªát y√™u c·∫ßu) ---
async def duyet_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # Thay b·∫±ng ID admin c·ªßa b·∫°n
    ADMIN_ID = 5645750335 
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return
    
    if not context.args:
        await update.message.reply_text("üìå C√°ch d√πng: /duyet [ID ng∆∞·ªùi d√πng] [n·ªôi dung]")
        return
    
    target_id = context.args[0]
    reason = " ".join(context.args[1:]) if len(context.args) > 1 else "Kh√¥ng c√≥ ghi ch√∫"
    
    text = (
        f"‚úÖ ƒê√£ duy·ªát y√™u c·∫ßu c·ªßa user `{target_id}`\n"
        f"üìå L√Ω do: {reason}"
    )
    await update.message.reply_text(text, parse_mode="Markdown")
    
    # --- PH·∫¶N: /duyetrut (Admin duy·ªát r√∫t ti·ªÅn) ---
async def duyetrut_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # ID admin c·ªßa b·∫°n
    ADMIN_ID = 5645750335 
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return
    
    if len(context.args) < 2:
        await update.message.reply_text("üìå C√°ch d√πng: /duyetrut [ID ng∆∞·ªùi d√πng] [s·ªë ti·ªÅn]")
        return
    
    target_id = context.args[0]
    amount = context.args[1]
    
    # Demo: ch·ªâ th√¥ng b√°o ƒë√£ duy·ªát
    text = f"‚úÖ Y√™u c·∫ßu r√∫t {amount}ƒë c·ªßa user `{target_id}` ƒë√£ ƒë∆∞·ª£c duy·ªát."
    await update.message.reply_text(text, parse_mode="Markdown")
    
    # Sau n√†y c√≥ th·ªÉ tr·ª´ s·ªë d∆∞ v√† g·ª≠i th√¥ng b√°o cho user
    # context.bot.send_message(chat_id=target_id, text=f"üí∏ Y√™u c·∫ßu r√∫t {amount}ƒë c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát!")
    # --- PH·∫¶N: /thongbao (Admin g·ª≠i th√¥ng b√°o to√†n server) ---
async def thongbao_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    # ID admin c·ªßa b·∫°n
    ADMIN_ID = 5645750335 
    
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")
        return
    
    if not context.args:
        await update.message.reply_text("üìå C√°ch d√πng: /thongbao [n·ªôi dung th√¥ng b√°o]")
        return
    
    message = " ".join(context.args)
    
    # Demo: ch·ªâ g·ª≠i ph·∫£n h·ªìi cho admin
    # Sau n√†y b·∫°n c√≥ th·ªÉ l·∫∑p qua DB users v√† g·ª≠i message cho t·∫•t c·∫£
    await update.message.reply_text(f"üì¢ Th√¥ng b√°o ƒë√£ g·ª≠i to√†n server:\n\n{message}")
    # --- H√†m ki·ªÉm tra gi·ªõi h·∫°n nhi·ªám v·ª• h√†ng ng√†y ---
def check_daily_limit(user_id, username):
    conn = sqlite3.connect("users.db")
    c = conn.cursor()

    # Th√™m user n·∫øu ch∆∞a c√≥
    c.execute("SELECT tasks_done, last_reset FROM users WHERE user_id=?", (user_id,))
    row = c.fetchone()
    if not row:
        c.execute(
            "INSERT INTO users (user_id, username, tasks_done, last_reset) VALUES (?, ?, 0, '')",
            (user_id, username)
        )
        conn.commit()
        tasks_done = 0
        last_reset = ''
    else:
        tasks_done, last_reset = row

    today = datetime.datetime.now().strftime("%Y-%m-%d")
    if last_reset != today:
        # reset m·ªói ng√†y
        tasks_done = 0
        c.execute(
            "UPDATE users SET tasks_done=0, last_reset=? WHERE user_id=?",
            (today, user_id)
        )
        conn.commit()

    conn.close()
    return tasks_done < 10  # True n·∫øu ch∆∞a ƒë·∫°t gi·ªõi h·∫°n 10 nhi·ªám v·ª•
    # --- Admin xo√° nhi·ªám v·ª• ---
async def delnhiemvu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn d√πng l·ªánh n√†y.")

    if not context.args or not context.args[0].isdigit():
        return await update.message.reply_text("‚ö†Ô∏è D√πng ƒë√∫ng c√∫ ph√°p: /delnhiemvu <id>")

    task_id = int(context.args[0])

    conn = sqlite3.connect("vipbot.db")
    c = conn.cursor()
    c.execute("DELETE FROM tasks WHERE id=?", (task_id,))
    conn.commit()
    conn.close()

    await update.message.reply_text(f"üóëÔ∏è ƒê√£ xo√° nhi·ªám v·ª• c√≥ ID {task_id}")


# --- Admin li·ªát k√™ nhi·ªám v·ª• ---
async def listnhiemvu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect("vipbot.db")
    c = conn.cursor()
    c.execute("SELECT id, description FROM tasks")
    tasks = c.fetchall()
    conn.close()

    if not tasks:
        return await update.message.reply_text("üì≠ Hi·ªán ch∆∞a c√≥ nhi·ªám v·ª• n√†o.")

    text = "üìã *Danh s√°ch nhi·ªám v·ª•:*\n\n"
    for tid, desc in tasks:
        text += f"{tid}. {desc}\n"

    await update.message.reply_text(text, parse_mode="Markdown")
    conn.commit()  # N·∫øu qu√™n l·ªánh n√†y, d·ªØ li·ªáu kh√¥ng l∆∞u
        # --- PH·∫¶N: /nap_request (g·ª≠i y√™u c·∫ßu n·∫°p cho admin) ---
async def nap_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ADMIN_ID = 5645750335  # Thay b·∫±ng ID admin
    if context.args:
        try:
            amount = int(context.args[0])
            if amount < 1000:
                await update.message.reply_text("‚ö† S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† 1.000ƒë.")
                return
            # Th√¥ng b√°o user
            await update.message.reply_text(
                f"‚úÖ Y√™u c·∫ßu n·∫°p {amount}ƒë ƒë√£ g·ª≠i ƒë·∫øn admin, ch·ªù duy·ªát."
            )
            # Th√¥ng b√°o admin
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"Ng∆∞·ªùi d√πng {user.first_name} (@{user.username}, ID: {user.id}) mu·ªën n·∫°p {amount}ƒë."
            )
        except ValueError:
            await update.message.reply_text("‚ö† Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá, v√≠ d·ª•: /nap_request 50000")
    else:
        await update.message.reply_text(
            "üí≥ H∆∞·ªõng d·∫´n n·∫°p ti·ªÅn:\n"
            "- Chuy·ªÉn ti·ªÅn v√†o TK: 123445799\n"
            "- Ch·ªß TK: Nguyen Van A\n"
            "- N·ªôi dung: nap <uid telegram b·∫°n>\n\n"
            "Sau khi chuy·ªÉn xong, d√πng l·ªánh /nap_request <s·ªë ti·ªÅn> ƒë·ªÉ th√¥ng b√°o admin."
        )
 # --- Handler /duyet_task ---
async def approve_task(update, context):
    # Ki·ªÉm tra admin
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng ph·∫£i admin!")
        return

    # Ki·ªÉm tra c√∫ ph√°p: /duyet_task user_id task_id
    if len(context.args) != 2:
        await update.message.reply_text("C√∫ ph√°p: /duyet_task user_id task_id")
        return

    try:
        user_id = int(context.args[0])
        task_id = int(context.args[1])
    except ValueError:
        await update.message.reply_text("‚ùå User ID v√† Task ID ph·∫£i l√† s·ªë!")
        return

    # C·∫≠p nh·∫≠t tr·∫°ng th√°i nhi·ªám v·ª•
    c.execute('''
    UPDATE user_tasks SET status='approved'
    WHERE user_id=? AND task_id=?
    ''', (user_id, task_id))
    conn.commit()

    await update.message.reply_text(f"‚úÖ Nhi·ªám v·ª• {task_id} c·ªßa user {user_id} ƒë√£ ƒë∆∞·ª£c duy·ªát!")
    # --- Handler /duyet_tasks (li·ªát k√™ t·∫•t c·∫£ nhi·ªám v·ª• pending) ---
async def list_pending_tasks(update, context):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng ph·∫£i admin!")
        return

    c.execute("""
    SELECT user_id, task_id, status
    FROM user_tasks
    WHERE status='pending'
    """)
    rows = c.fetchall()

    if not rows:
        await update.message.reply_text("üì≠ Hi·ªán kh√¥ng c√≥ nhi·ªám v·ª• n√†o ƒëang ch·ªù duy·ªát.")
        return

    msg = "üìã **Danh s√°ch nhi·ªám v·ª• pending:**\n\n"
    for user_id, task_id, status in rows:
        msg += f"User: {user_id} | Task: {task_id} | Tr·∫°ng th√°i: {status}\n"
    
    await update.message.reply_text(msg, parse_mode='Markdown')


# --- /duyetnap admin duy·ªát ---
async def duyetnap(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ADMIN_ID = 5645750335
    if update.effective_user.id != ADMIN_ID:
        return
    if len(context.args) != 2:
        await update.message.reply_text("üìå C√∫ ph√°p: /duyetnap <user_id> <s·ªë ti·ªÅn>")
        return
    user_id = int(context.args[0])
    amount = int(context.args[1])
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute("UPDATE users SET balance = balance + ? WHERE user_id=?", (amount, user_id))
    conn.commit()
    conn.close()
    await update.message.reply_text(f"‚úÖ ƒê√£ c·ªông {amount}ƒë cho user {user_id}.")
async def main():
    app = Application.builder().token(TOKEN).build()
    
    # --- Handler user ---
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(CommandHandler("rules", rules_handler))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CommandHandler("diemdanh", diemdanh))
    app.add_handler(CommandHandler("code", code_handler))
    app.add_handler(CommandHandler("ref", ref))
    app.add_handler(CommandHandler("thu", thu))
    app.add_handler(CommandHandler("nhiemvu", nhiemvu))
    app.add_handler(CommandHandler("choan", choan))
    app.add_handler(CommandHandler("choi", choi))
    app.add_handler(CommandHandler("taixiu", taixiu))
    app.add_handler(CommandHandler("nap", nap))
    app.add_handler(CommandHandler("xoso", xoso))
    app.add_handler(CommandHandler("support", support))
    app.add_handler(CommandHandler("nhan", nhan))
    app.add_handler(CommandHandler("rut", rut))
    app.add_handler(CommandHandler("hoanthanh_1", submit_task))

    # --- Handler admin ---
    app.add_handler(CommandHandler("duyet_tasks", list_pending_tasks))
    app.add_handler(CommandHandler("addnv", addnv_handler))
    app.add_handler(CommandHandler("delnv", delnv_handler))
    app.add_handler(CommandHandler("duyet", duyet_handler))
    app.add_handler(CommandHandler("duyetrut", duyetrut_handler))
    app.add_handler(CommandHandler("thongbao", thongbao_handler))
    app.add_handler(CommandHandler("nap_request", nap_request))
    app.add_handler(CommandHandler("start_xoso", start_xoso))
    app.add_handler(CommandHandler("duyetnap", duyetnap))
    app.add_handler(CommandHandler("setnhiemvu", setnhiemvu))
    app.add_handler(CommandHandler("delnhiemvu", delnhiemvu))
    app.add_handler(CommandHandler("listnhiemvu", listnhiemvu))

    print("ü§ñ Bot ƒëang ch·∫°y...")
    await app.run_polling()


import asyncio

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())